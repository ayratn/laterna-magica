/**
 * ManaSymbol.java
 * 
 * Created on 13.07.2009
 */

package net.slightlymagic.laterna.magica.mana;


import java.io.Serializable;
import java.util.List;
import java.util.Set;

import net.slightlymagic.laterna.magica.characteristics.MagicColor;



/**
 * The class ManaSymbol. A mana symbol can be used as a part of a cost, or to specify the type or ammount of mana
 * created by an effect. Different types of symbols are:
 * 
 * <ul>
 * <li>A colored mana symbol
 * <ul>
 * <li>costs a single mana of the appropriate color</li>
 * <li>generates a single mana of the appropriate color</li>
 * </ul>
 * </li>
 * <li>A snow mana symbol
 * <ul>
 * <li>costs any mana generated by a snow permanent</li>
 * <li>is not used for mana-generating effect</li>
 * </ul>
 * </li>
 * <li>A numeral mana symbol
 * <ul>
 * <li>costs that amount of any type(s) of mana</li>
 * <li>generates that amount of colorless mana</li>
 * </ul>
 * </li>
 * <li>A variable mana symbol
 * <ul>
 * <li>costs an amount of any type(s) of mana specified by the variable X</li>
 * <li>generates an amount of colorless of mana specified by the variable X</li>
 * </ul>
 * </li>
 * <li>A hybrid mana symbol
 * <ul>
 * <li>costs any of the partial mana symbols</li>
 * <li>generates the amount any of the partial mana symbols would generate</li>
 * </ul>
 * </li>
 * </ul>
 * 
 * @version V0.0 13.07.2009
 * @author Clemens Koza
 */
public interface ManaSymbol extends Serializable {
    public static enum ManaType {
        COLORED, SNOW, NUMERAL, VARIABLE, HYBRID;
    }
    
    /**
     * Returns the type of this mana symbol.
     */
    public ManaType getType();
    
    /**
     * Returns the color of this colored symbol.
     * 
     * @throws IllegalStateException if the type is wrong.
     */
    public MagicColor getColor();
    
    /**
     * Returns the amount of this numeral symbol.
     * 
     * @throws IllegalStateException if the type is wrong.
     */
    public int getAmount();
    
    /**
     * Returns the name of this variable symbol.
     * 
     * @throws IllegalStateException if the type is wrong.
     */
    public char getVariableName();
    
    /**
     * Returns the parts of this hybrid symbol.
     * 
     * @throws IllegalStateException if the type is wrong.
     */
    public List<ManaSymbol> getParts();
    
    /**
     * Returns the symbol's converted mana cost of the symbol
     */
    public int getConvertedCost();
    
    /**
     * Returns all colors of this mana symbol.
     */
    public Set<MagicColor> getColors();
}
