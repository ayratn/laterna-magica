The Config file format is a compact and human readable format for storing configuration
information and serializing data. It supports syntax-shortcuts that make it shorter and
easier to use and read than XML, JSON and other general-purpose text based file formats.

Furthermore, the Config file format can be read into plain old Java beans without explicit
coding, given the classes really use JavaBeans-convention getters and setters. For other
cases, plugin-like creators can be plugged in to parse non-standard classes. Pre-implemented
examples are
 - Class, where no new instances can be created, but Class.forName() is used to get instances.
 - Enum constants
 - URL, where it is very handy to resolve them relative to the config file, e.g. to reference
   other configuration files.


There are three types of comments: # and // both ignore the rest of a line, and /* ignores
everything until the next * / (minus the space in between).


Properties look like this:
[type] name [{':'|'='} value] ';'
[type] name [':' value] '{' body '}'

The type specifies the class of the property. Most of the time, the file format can infer
the needed data type from the Java bean property type, but in the case of polymorphic
properties, it is necessary to configure the type yourself. All fully qualified class names
are possible; all the primitive types as well as java.lang and java.util classes are available
by default.

The name identifies the property inside its parent: a body may only contain one property with
the same name. The name may also have an "index":
	property["index"]: "value";
is mapped to the following setter method invocation:
	setProperty("index", "value");
The index is part of the name for the sake of uniqueness.

The body may contain properties in the same form as shown above, so the file represents a tree
of properties that makes it easy to read and parse into an object oriented model. If there is
no body, the property ends in a semicolon, so, in either case, a property may span multiple
lines.

A value may be a boolean, BigInteger, BigDecimal, String, List or Map value, or a reference to
another property's value.
 - Only the two number types are supported, but the JavaBeans converter handles them
   appropriately for the property type.
 - Strings may be enclosed in "double" or 'single' quotes, and can contain the other type
   unescaped. Valid escape sequences are similar to those in the Java Language specification,
   octal and unicode escapes. Strings may span multiple lines.
 - Lists are specified as {el, el}, where el may be any value.
 - Lists are specified as {k:v, k=v}, where k and v may be any values.
   ':' and '=' are treated identical.
 - { } is interpreted as an empty list.
 - Relative references are in the format ../path/to/property, absolute references in the
   format /path/to/property. References are NOT enclosed in quotes. Relative references are
   resolved against the property's parent, as this example demonstrates:
	parent1 {
		child = "value1";
	}
	parent2 {
		child = "value2";
		value1 = ../parent1/child;
		value2 = child;
	}
   .. refers to /parent2's parent, not to /parent2/value1's parent, which would be /parent2.
 - References are resolved on the config tree level, not on the java object level, so, even
   when using references, the java converter will produce independent objects.
   Forward-references are supported.


Directives are a mechanism to influence how the file is parsed. Directives are written as
'@' type [{':'|'='} value] ';'
'@' type [':' value] '{' body '}'

There is currently only one pre-implemented directive, which is @Include and used to include
a config file specified as a URL, possibly relative to the current file, into the current
config tree. For example
	#parent.config
	hello: "bar" {
		@Include: "child.config";
	}
	
	#child.config
	world = "Hello, World";
	foo = /hello;
is the same as
	hello: "bar" {
		world = "Hello, World";
		foo = /hello;
	}


You probably don't have to modify any config files. If you do, take care that keys like
/hello/world keep consistent, and that URLs keep valid, especially when moving files between
directories.
